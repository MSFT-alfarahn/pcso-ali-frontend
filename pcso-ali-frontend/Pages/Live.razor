@page "/live"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

@if (messages != null)
{
    @foreach (var message in messages)
    {
        <MudCard>
            <!--MudCardMedia Image="images/satya.jfif" Height="50" /-->
            <MudCardContent>
                <MudText Typo="Typo.h5" Color="Color.Primary">@message</MudText>
            </MudCardContent>
        </MudCard>
        <br />
    }
}
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()        
            .WithUrl("https://pcso-ali-backend.azurewebsites.net/chat")
            .Build();

        hubConnection.On<string, string>("Receive", (name, message) =>
        {
            var encodedMsg = $"{name}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Broadcast", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}